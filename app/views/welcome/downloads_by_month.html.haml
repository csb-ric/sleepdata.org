- case params[:user_type] when 'aug'
  - user_ids = User.current.where( aug_member: true ).pluck(:id)
  - user_type = 'AUG Members'
- when 'core'
  - user_ids = User.current.where( core_member: true ).pluck(:id)
  - user_type = 'Core Members'
- when 'regular'
  - user_ids = User.current.where( aug_member: false, core_member: false ).pluck(:id)
  - user_type = 'Regular Members'
- else
  - user_ids = User.current.pluck(:id)
  - user_type = 'All Members'

- @title = "Downloads By Month for #{user_type}"
.slim-container.dark-texture
  %h1= @title

.slim-container.math-texture
  - @year = (params[:year] || Date.today.year).to_i

  = link_to downloads_by_month_path(year: @year - 1, user_type: params[:user_type]), class: 'btn btn-xs btn-default' do
    %span.glyphicon.glyphicon-chevron-left
    Previous Year
  = link_to 'Current Year', downloads_by_month_path(user_type: params[:user_type]), class: 'btn btn-xs btn-default'
  = link_to downloads_by_month_path(year: @year + 1, user_type: params[:user_type]), class: 'btn btn-xs btn-default' do
    Next Year
    %span.glyphicon.glyphicon-chevron-right
  = link_to 'All Members', downloads_by_month_path(year: @year), class: "btn btn-xs #{ !['regular', 'core', 'aug'].include?(params[:user_type]) ? 'btn-primary' : 'btn-default'}"
  = link_to 'Regular Members', downloads_by_month_path(year: @year, user_type: 'regular'), class: "btn btn-xs #{ params[:user_type] == 'regular' ? 'btn-primary' : 'btn-default'}"
  = link_to 'AUG Members', downloads_by_month_path(year: @year, user_type: 'aug'), class: "btn btn-xs #{ params[:user_type] == 'aug' ? 'btn-primary' : 'btn-default'}"
  = link_to 'Core Members', downloads_by_month_path(year: @year, user_type: 'core'), class: "btn btn-xs #{ params[:user_type] == 'core' ? 'btn-primary' : 'btn-default'}"

  - series = Dataset.current.order(:release_date, :name).collect do |dataset|
    - file_sizes = (1..12).to_a.collect do |month|
      - current_month = Date.parse("#{@year}-#{month}-01")
      - dataset.dataset_file_audits.audit_after(current_month).audit_before(current_month.end_of_month).where( user_id: user_ids ).sum( :file_size ).to_i
    - if file_sizes.sum > 0
      - { name: dataset.name, data: file_sizes }
    - else
      - nil

  - series = series.compact

  - series = [{ name: 'No Downloads', data: [0]*12}] if series.blank?

  %hr.divider-md

  #downloads-chart-container{ data: { series: series.to_json, categories: Date::ABBR_MONTHNAMES.last(12).to_json, title: "#{@year} Downloads", subtitle: user_type, yaxis: "File Size" } }
