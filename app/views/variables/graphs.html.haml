- @title = "#{@variable.name.upcase} - #{@dataset.slug.upcase} Variables"

= render 'variables/header'

.row
  .col-md-3
    = render 'variables/menu'
  .col-md-9
    = hidden_field_tag 'chart_type', params[:g]

    - json_location = File.join(@dataset.root_folder, 'dd', 'graphs', @version, "#{@variable.name}.json")
    - json = JSON.parse(File.read(json_location)) rescue json = nil
    #charts-info{ style: 'display:hidden', data: { charts: "#{json.to_json}" } }

    - charts = []
    - charts = json['charts'].keys.collect { |k| [k.titleize, k] } if json.is_a?(Hash) && json['charts'].is_a?(Hash)
    - chart = charts.find { |chart_name, chart_value| chart_value == params[:g] }
    - chart = charts.first unless chart


    - if charts.size > 0
      .slim-container.math-texture
        - if false
          - [['hidden-sm hidden-xs', 'btn-lg'], ['hidden-md hidden-lg', 'btn-sm']].each do |hidden_classes, btn_size_class|
            .btn-group.btn-group-justified{ class: hidden_classes, style: "padding-bottom:20px" }
              - charts.each do |chart_name, chart_value|
                = link_to chart_name, '#', class: "btn btn-#{chart_value == params[:g].to_s || (chart_value == 'histogram' && params[:g].blank?) ? 'primary' : 'default'} #{btn_size_class}", data: { object: 'variable-chart-button', chart_type: chart_value }
        %h1= chart.first if chart
        #chart-container.math-texture{ style: "min-width: 200px; max-width: 800px; height: 400px; margin: 0 auto" }
    - if false
      - if false
      - elsif File.file?(File.join(@dataset.root_folder, 'dd', 'images', @version, "#{@variable.name}-lg.png"))
        .slim-container.math-texture
          - [['hidden-sm hidden-xs', 'btn-lg'], ['hidden-md hidden-lg', 'btn-sm']].each do |hidden_classes, btn_size_class|
            .btn-group.btn-group-justified{ class: hidden_classes, style: "padding-bottom:20px" }
              = link_to 'Graph', '#', data: { object: 'suppress-click' }, class: "btn btn-primary #{btn_size_class}"
          %center
            = image_tag image_dataset_variable_path(@variable.dataset, @variable, size: 'lg'), style: 'max-width: 100%;max-height:400px;display:block'
      - elsif File.file?(File.join( @dataset.root_folder, 'dd', 'images', @version, "#{@variable.name}.svg"))
        .slim-container.math-texture
          - [['hidden-sm hidden-xs', 'btn-lg'], ['hidden-md hidden-lg', 'btn-sm']].each do |hidden_classes, btn_size_class|
            .btn-group.btn-group-justified{ class: hidden_classes, style: "padding-bottom:20px" }
              = link_to 'Graph', '#', data: { object: 'suppress-click' }, class: "btn btn-primary #{btn_size_class}"
          %center
            %object{ type: 'image/svg+xml', data: image_dataset_variable_path(@variable.dataset, @variable, size: 'lg', format: 'svg'), style: 'max-width: 100%;max-height:400px;display:block' }
              Your browser does not support SVG

    - if json && json['tables']
      - (json['tables'] || []).each do |key, tables|
        %div{ style: "display:none", data: { chart_name: key } }
          - [tables].flatten.each do |table|
            - if table.is_a?(Hash)
              %h3{ style: "text-align:center;margin:0px" }= table['title']
              %h5{ style: "text-align:center;margin:0px;padding-bottom:8px" }= table['subtitle']

              .table-responsive
                %table.table.table-hover
                  %thead
                    - (table['headers'] || []).each do |headers|
                      %tr
                        - headers.each do |cell|
                          = render 'variables/table_cell', cell: cell, type: :th
                  %tfoot
                    - (table['footers'] || []).each do |footers|
                      %tr
                        - footers.each do |cell|
                          = render 'variables/table_cell', cell: cell, type: :td
                  %tbody
                    - (table['rows'] || []).each do |rows|
                      %tr
                        - rows.each do |cell|
                          = render 'variables/table_cell', cell: cell, type: :td
